<Activity mc:Ignorable="sap sap2010" x:Class="Solution02pt2_Mathematical" this:Solution02pt2_Mathematical.in_TargetOutput="19690720" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="out_Answer" Type="InArgument(x:String)" />
    <x:Property Name="in_TargetOutput" Type="InArgument(x:Int32)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>400,2663</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Solution02pt2_Mathematical_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="21">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="17">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Description:&#xA;Find the input values (aka, Noun and Verb) for a given target output. This solution uses a mathematical approach. After doing the brute force method, I noticed a pattern in the output:&#xD;&#xA;&#xD;&#xA;Noun Verb Answer&#xD;&#xA;0 0 644274&#xD;&#xA;0 1 644275&#xD;&#xA;0 2 644276&#xD;&#xA;0 3 644277&#xD;&#xA;0 4 644278&#xD;&#xA;0 5 644279&#xD;&#xA;0 6 644280&#xD;&#xA;0 7 644281&#xD;&#xA;0 8 644282&#xD;&#xA;0 9 644283&#xD;&#xA;1 0 1258674&#xD;&#xA;1 1 1258675&#xD;&#xA;1 2 1258676&#xD;&#xA;1 3 1258677&#xD;&#xA;1 4 1258678&#xD;&#xA;1 5 1258679&#xD;&#xA;1 6 1258680&#xD;&#xA;1 7 1258681&#xD;&#xA;1 8 1258682&#xD;&#xA;1 9 1258683&#xD;&#xA;2 0 1873074&#xD;&#xA;2 1 1873075&#xD;&#xA;2 2 1873076&#xD;&#xA;2 3 1873077&#xD;&#xA;2 4 1873078&#xD;&#xA;2 5 1873079&#xD;&#xA;2 6 1873080&#xD;&#xA;2 7 1873081&#xD;&#xA;2 8 1873082&#xD;&#xA;2 9 1873083&#xD;&#xA;&#xD;&#xA;In this example, if you change the Verb by 1, the answer increases by 1. And if you change the Noun by 1 the answer increases by 614400. Using this knowledge, you can create a formula to calculate the answer for a Target Output.&#xD;&#xA;&#xD;&#xA;For example:&#xD;&#xA;First you need to find the Base case when the Noun and Verb are both 0:&#xD;&#xA;- Noun 0&#xD;&#xA;- Verb 0&#xD;&#xA;- Answer 644274&#xD;&#xA;&#xD;&#xA;Then you find the difference, also called the Î” or delta, between the Base case and the case where the Noun is increased by 1. We'll call this the NounDelta:&#xD;&#xA;- Noun 1&#xD;&#xA;- Verb 0&#xD;&#xA;- Answer 1258674&#xA;- NounDelta 614400&#xD;&#xA;&#xD;&#xA;Then we find the VerbDelta:&#xD;&#xA;- Noun 0&#xD;&#xA;- Verb 1&#xD;&#xA;- Answer 644275&#xA;- VerbDelta 1&#xD;&#xA;&#xD;&#xA;So to calculate the Noun:&#xD;&#xA;(TargetOutput - Base) \ NounDelta&#xD;&#xA;(19690720 - 644274) \ 614400 rounds down to 31&#xD;&#xA;&#xD;&#xA;To calculate the Verb:&#xD;&#xA;(TargetOutput - (Noun * NounDelta + Base))\VerbDelta&#xD;&#xA;(19690720 - (31 * 614400 + 644274))\1 rounds down to 46&#xD;&#xA;&#xA;Pre-conditions:&#xA;Day02\input.txt file must exist and contain only have valid Intcode.&#xA;&#xA;Post-conditions:&#xA;None" DisplayName="Solution02pt2_Mathematical" sap:VirtualizedContainerService.HintSize="380,2603" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="BaseAnswer" />
      <Variable x:TypeArguments="x:String" Name="NounDeltaAnswer" />
      <Variable x:TypeArguments="x:String" Name="VerbDeltaAnswer" />
      <Variable x:TypeArguments="x:Int32" Name="NounDelta" />
      <Variable x:TypeArguments="x:Int32" Name="VerbDelta" />
      <Variable x:TypeArguments="x:Int32" Name="Base" />
      <Variable x:TypeArguments="x:Int32" Name="Noun" />
      <Variable x:TypeArguments="x:Int32" Name="Verb" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Find the Base Answer:&#xD;&#xA;- Noun is 0&#xD;&#xA;- Verb is 0" DisplayName="Find the Base case" sap:VirtualizedContainerService.HintSize="338,144" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Day02\Solution02pt1.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_Noun">00</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_Verb">00</InArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="out_Answer">[BaseAnswer]</OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <Assign DisplayName="Base case" sap:VirtualizedContainerService.HintSize="338,60" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[Base]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">[Int32.Parse(BaseAnswer)]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Now we're going to change the Noun by 1:&#xD;&#xA;- Noun is 1&#xD;&#xA;- Verb is 0&#xD;&#xA;&#xD;&#xA;This will help us find how much the answer changes by changing just the Noun by 1 (i.e., the delta)." DisplayName="Find the NounDelta case" sap:VirtualizedContainerService.HintSize="338,189" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="Day02\Solution02pt1.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_Noun">01</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_Verb">00</InArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="out_Answer">[NounDeltaAnswer]</OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <Assign sap2010:Annotation.AnnotationText="The NounDelta is the difference between the Base case and the case where the Noun was increased by 1." DisplayName="NounDelta" sap:VirtualizedContainerService.HintSize="338,117" sap2010:WorkflowViewState.IdRef="Assign_2">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[NounDelta]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">[Math.Abs(Base - Int32.Parse(NounDeltaAnswer))]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Now we're going to change the Verb by 1:&#xD;&#xA;- Noun is 0&#xD;&#xA;- Verb is 1&#xD;&#xA;&#xD;&#xA;This will help us find how much the answer changes by changing just the Verb by 1 (i.e., the delta)." DisplayName="Find the VerbDelta case" sap:VirtualizedContainerService.HintSize="338,189" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="Day02\Solution02pt1.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_Noun">00</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_Verb">01</InArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="out_Answer">[VerbDeltaAnswer]</OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <Assign sap2010:Annotation.AnnotationText="The VerbDelta is the difference between the Base case and the case where the Verb was increased by 1." DisplayName="VerbDelta" sap:VirtualizedContainerService.HintSize="338,117" sap2010:WorkflowViewState.IdRef="Assign_3">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[VerbDelta]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">[Math.Abs(Base - Int32.Parse(VerbDeltaAnswer))]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <ui:MultipleAssign sap2010:Annotation.AnnotationText="Calculate the Noun and Verb. Then format the Answer." DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="338,187" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:Int32">[Noun]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:Int32">[(in_TargetOutput - Base) \ NounDelta]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:Int32">[Verb]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:Int32">[(in_TargetOutput - (Noun * NounDelta + Base))\VerbDelta]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[out_Answer]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[Right("00" &amp; CStr(Noun), 2) &amp; Right("00" &amp; CStr(Verb), 2)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:MultipleAssign>
    <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="WriteLine_1" Text="[&quot;Answer: &quot; &amp; out_Answer]" />
  </Sequence>
</Activity>