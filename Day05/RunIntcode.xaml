<Activity mc:Ignorable="sap sap2010" x:Class="RunIntcode" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Why not an In/Out argument? Because you can't set a default value to an In/Out argument." Name="in_Intcode" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="out_Intcode" Type="OutArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>646,2090</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>RunIntcode_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="21">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="32">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldExpandAll">False</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence sap2010:Annotation.AnnotationText="Description:&#xA;Implements the IntCode computer.&#xA;&#xA;Pre-conditions:&#xA;None&#xA;&#xA;Post-conditions:&#xA;None" DisplayName="RunIntcode" sap:VirtualizedContainerService.HintSize="626,2030" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="s:Int32[]" Name="Mem" />
      <Variable x:TypeArguments="x:Int32" Name="InstructionPtr" />
      <Variable x:TypeArguments="x:Int32" Name="Opcode" />
      <Variable x:TypeArguments="x:Int32" Name="Input" />
      <Variable x:TypeArguments="x:String" Name="Instruction" />
      <Variable x:TypeArguments="x:Int32" Name="Mode1" />
      <Variable x:TypeArguments="x:Int32" Name="Mode2" />
      <Variable x:TypeArguments="x:Int32" Name="Mode3" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Assign sap2010:Annotation.AnnotationText="Use Array.Convert() to convert String[] array to Int32[] array." DisplayName="Initialize memory from input." sap:VirtualizedContainerService.HintSize="584,102" sap2010:WorkflowViewState.IdRef="Assign_4">
      <Assign.To>
        <OutArgument x:TypeArguments="s:Int32[]">[Mem]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="s:Int32[]">[Array.ConvertAll(Split(in_Intcode, ","), Function(str) Integer.Parse(str))]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <DoWhile DisplayName="While Opcode is not 99" sap:VirtualizedContainerService.HintSize="584,1564" sap2010:WorkflowViewState.IdRef="DoWhile_1" Condition="[Opcode &lt;&gt; 99]">
      <Sequence DisplayName="Run the Intcode program" sap:VirtualizedContainerService.HintSize="538,1402" sap2010:WorkflowViewState.IdRef="Sequence_3">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <Assign sap2010:Annotation.AnnotationText="Get the Instruction. The Instruction is five characters. Need to add back the leading zeros.&#xD;&#xA;&#xD;&#xA;The first character is the Mode of the 3rd parameter.&#xD;&#xA;&#xD;&#xA;The second character is the Mode of the 2nd parameter.&#xD;&#xA;&#xD;&#xA;The third character is the Mode of the 1st parameter.&#xD;&#xA;&#xD;&#xA;The fourth and fifth characters together is the Opcode." DisplayName="Get the Instruction" sap:VirtualizedContainerService.HintSize="496,297" sap2010:WorkflowViewState.IdRef="Assign_11">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">[Instruction]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">[CStr(Mem(InstructionPtr)).PadLeft(5, "0"C)]</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <Assign DisplayName="Opcode" sap:VirtualizedContainerService.HintSize="496,60" sap2010:WorkflowViewState.IdRef="Assign_12">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">[Opcode]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">[Integer.Parse(Right(Instruction, 2))]</InArgument>
          </Assign.Value>
        </Assign>
        <Assign sap2010:Annotation.AnnotationText="0 is position mode&#xD;&#xA;1 is immediate mode" DisplayName="Mode of 1st parameter" sap:VirtualizedContainerService.HintSize="496,102" sap2010:WorkflowViewState.IdRef="Assign_13">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">[Mode1]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">[Integer.Parse(Instruction(2))]</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <Assign sap2010:Annotation.AnnotationText="0 is position mode&#xD;&#xA;1 is immediate mode" DisplayName="Mode of the 2nd parameter" sap:VirtualizedContainerService.HintSize="496,102" sap2010:WorkflowViewState.IdRef="Assign_14">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">[Mode2]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">[Integer.Parse(Instruction(1))]</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <Assign sap2010:Annotation.AnnotationText="0 is position mode&#xD;&#xA;1 is immediate mode" DisplayName="Mode of the 3rd parameter" sap:VirtualizedContainerService.HintSize="496,102" sap2010:WorkflowViewState.IdRef="Assign_15">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">[Mode3]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">[Integer.Parse(Instruction(0))]</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <Switch x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="In the cases, we use an inline If statement to check for position vs immediate mode." DisplayName="Check the Opcode" Expression="[Opcode]" sap:VirtualizedContainerService.HintSize="496,447" sap2010:WorkflowViewState.IdRef="Switch`1_1">
          <Switch.Default>
            <Throw DisplayName="Throw: Unknown Opcode" Exception="[New Exception(&quot;Invalid Opcode: Something went wrong.&quot;)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_1" />
          </Switch.Default>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence x:Key="1" DisplayName="Add" sap:VirtualizedContainerService.HintSize="304,246" sap2010:WorkflowViewState.IdRef="Sequence_4">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Add" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_6">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[Mem(Mem(InstructionPtr + 3))]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[If(Mode1 = 0, Mem(Mem(InstructionPtr + 1)), Mem(InstructionPtr + 1)) + If(Mode2 = 0, Mem(Mem(InstructionPtr + 2)), Mem(InstructionPtr + 2))]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Go to the next Opcode" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_8">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[InstructionPtr]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[InstructionPtr + 4]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
          <Sequence x:Key="2" DisplayName="Multiply" sap:VirtualizedContainerService.HintSize="304,246" sap2010:WorkflowViewState.IdRef="Sequence_5">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Multiply" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_10">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[Mem(Mem(InstructionPtr + 3))]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[If(Mode1 = 0, Mem(Mem(InstructionPtr + 1)), Mem(InstructionPtr + 1)) * If(Mode2 = 0, Mem(Mem(InstructionPtr + 2)), Mem(InstructionPtr + 2))]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Go to the next Opcode" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_16">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[InstructionPtr]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[InstructionPtr + 4]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
          <Sequence x:Key="3" DisplayName="Input" sap:VirtualizedContainerService.HintSize="376,381" sap2010:WorkflowViewState.IdRef="Sequence_6">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InputDialog Options="{x:Null}" DisplayName="Input Dialog" sap:VirtualizedContainerService.HintSize="334,92" sap2010:WorkflowViewState.IdRef="InputDialog_1" IsPassword="False" Label="Provide an input:" Title="Ship Computer">
              <ui:InputDialog.Result>
                <OutArgument x:TypeArguments="x:Int32">[Input]</OutArgument>
              </ui:InputDialog.Result>
            </ui:InputDialog>
            <Assign DisplayName="Save input" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_17">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[Mem(Mem(InstructionPtr + 1))]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[Input]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Go to the next Opcode" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_18">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[InstructionPtr]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[InstructionPtr + 2]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
          <Sequence x:Key="4" DisplayName="Output" sap:VirtualizedContainerService.HintSize="304,250" sap2010:WorkflowViewState.IdRef="Sequence_7">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="262,61" sap2010:WorkflowViewState.IdRef="WriteLine_1" Text="[&quot;Output: &quot; &amp; If(Mode1 = 0, Mem(Mem(InstructionPtr + 1)), Mem(InstructionPtr + 1))]" />
            <Assign DisplayName="Go to the next Opcode" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_19">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[InstructionPtr]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[InstructionPtr + 2]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
          <Assign x:Key="5" sap2010:Annotation.AnnotationText="If the first parameter is non-zero, it sets the instruction pointer to the value from the second parameter. Otherwise, it does nothing." DisplayName="Jump if true" sap:VirtualizedContainerService.HintSize="262,87" sap2010:WorkflowViewState.IdRef="Assign_21">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[InstructionPtr]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[If(If(Mode1 = 0, Mem(Mem(InstructionPtr + 1)), Mem(InstructionPtr + 1)) &lt;&gt; 0, If(Mode2 = 0, Mem(Mem(InstructionPtr + 2)), Mem(InstructionPtr + 2)), InstructionPtr + 3)]</InArgument>
            </Assign.Value>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Assign>
          <Assign x:Key="6" sap2010:Annotation.AnnotationText="If the first parameter is zero, it sets the instruction pointer to the value from the second parameter. Otherwise, it does nothing." DisplayName="Jump if false" sap:VirtualizedContainerService.HintSize="262,87" sap2010:WorkflowViewState.IdRef="Assign_20">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[InstructionPtr]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[If(If(Mode1 = 0, Mem(Mem(InstructionPtr + 1)), Mem(InstructionPtr + 1)) = 0, If(Mode2 = 0, Mem(Mem(InstructionPtr + 2)), Mem(InstructionPtr + 2)), InstructionPtr + 3)]</InArgument>
            </Assign.Value>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Assign>
          <Sequence x:Key="7" sap2010:Annotation.AnnotationText="If the first parameter is less than the second parameter, it stores 1 in the position given by the third parameter. Otherwise, it stores 0." DisplayName="Less than" sap:VirtualizedContainerService.HintSize="304,309" sap2010:WorkflowViewState.IdRef="Sequence_8">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_22">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[Mem(Mem(InstructionPtr + 3))]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[If(If(Mode1 = 0, Mem(Mem(InstructionPtr + 1)), Mem(InstructionPtr + 1)) &lt; If(Mode2 = 0, Mem(Mem(InstructionPtr + 2)), Mem(InstructionPtr + 2)), 1, 0)]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Go to the next Opcode" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_24">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[InstructionPtr]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[InstructionPtr + 4]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
          <Sequence x:Key="8" sap2010:Annotation.AnnotationText="If the first parameter is equal to the second parameter, it stores 1 in the position given by the third parameter. Otherwise, it stores 0." DisplayName="Equals" sap:VirtualizedContainerService.HintSize="304,309" sap2010:WorkflowViewState.IdRef="Sequence_9">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_23">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[Mem(Mem(InstructionPtr + 3))]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[If(If(Mode1 = 0, Mem(Mem(InstructionPtr + 1)), Mem(InstructionPtr + 1)) = If(Mode2 = 0, Mem(Mem(InstructionPtr + 2)), Mem(InstructionPtr + 2)), 1, 0)]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Go to the next Opcode" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_25">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[InstructionPtr]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[InstructionPtr + 4]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
          <x:Null x:Key="99" />
        </Switch>
      </Sequence>
    </DoWhile>
    <Assign DisplayName="Join array back into string" sap:VirtualizedContainerService.HintSize="584,60" sap2010:WorkflowViewState.IdRef="Assign_9">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[out_Intcode]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[String.Join(",", Mem)]</InArgument>
      </Assign.Value>
    </Assign>
  </Sequence>
</Activity>