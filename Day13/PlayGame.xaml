<Activity mc:Ignorable="sap sap2010" x:Class="PlayGame" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System" xmlns:scg1="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="io_InputQueue" Type="InOutArgument(scg:Queue(x:Int64))" />
    <x:Property Name="io_OutputQueue" Type="InOutArgument(scg:Queue(x:Int64))" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>954,1673</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>DrawScreen_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg1:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
    </scg1:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence sap2010:Annotation.AnnotationText="Description:&#xD;&#xA;Play the breakout game and beat the game. Move the paddle to always be underneath the ball.&#xD;&#xA;&#xD;&#xA;Pre-conditions:&#xD;&#xA;None&#xD;&#xA;&#xD;&#xA;Post-conditions:&#xD;&#xA;None" DisplayName="PlayGame" sap:VirtualizedContainerService.HintSize="934,1613" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="s:Char[][]" Name="Screen" />
      <Variable x:TypeArguments="x:Int32" Default="0" Name="QueueCount" />
      <Variable x:TypeArguments="x:Int64" Name="Score" />
      <Variable x:TypeArguments="s:Tuple(x:Int64, x:Int64)" Name="Paddle" />
      <Variable x:TypeArguments="s:Tuple(x:Int64, x:Int64)" Name="Ball" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg1:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg1:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <While DisplayName="Infinite loop" sap:VirtualizedContainerService.HintSize="892,1389" sap2010:WorkflowViewState.IdRef="While_2" Condition="True">
      <Sequence DisplayName="Play game" sap:VirtualizedContainerService.HintSize="846,1231" sap2010:WorkflowViewState.IdRef="Sequence_4">
        <sap:WorkflowViewStateService.ViewState>
          <scg1:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg1:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <While DisplayName="Wait for OutputQueue" sap:VirtualizedContainerService.HintSize="804,372" sap2010:WorkflowViewState.IdRef="While_1" Condition="[QueueCount = 0 OrElse QueueCount &lt;&gt; io_OutputQueue.Count]">
          <Sequence DisplayName="Wait" sap:VirtualizedContainerService.HintSize="304,214" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <sap:WorkflowViewStateService.ViewState>
              <scg1:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg1:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Delay Duration="00:00:00.1000000" sap:VirtualizedContainerService.HintSize="262,22" sap2010:WorkflowViewState.IdRef="Delay_1" />
            <Assign DisplayName="Update count" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_6">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[QueueCount]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[io_OutputQueue.Count]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </While>
        <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke DrawScreen workflow" sap:VirtualizedContainerService.HintSize="804,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Day13\DrawScreen.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <InOutArgument x:TypeArguments="s:Char[][]" x:Key="io_Screen">[Screen]</InOutArgument>
            <InArgument x:TypeArguments="s:Int64[]" x:Key="in_Instructions">[io_OutputQueue.ToArray()]</InArgument>
            <InOutArgument x:TypeArguments="s:Tuple(x:Int64, x:Int64)" x:Key="out_Paddle">[Paddle]</InOutArgument>
            <InOutArgument x:TypeArguments="s:Tuple(x:Int64, x:Int64)" x:Key="out_Ball">[Ball]</InOutArgument>
            <InOutArgument x:TypeArguments="x:Int64" x:Key="io_Score">[Score]</InOutArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
        <InvokeMethod DisplayName="Queue.Clear()" sap:VirtualizedContainerService.HintSize="804,132" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="Clear">
          <InvokeMethod.TargetObject>
            <InArgument x:TypeArguments="scg:Queue(x:Int64)">[io_OutputQueue]</InArgument>
          </InvokeMethod.TargetObject>
        </InvokeMethod>
        <If Condition="[Paddle.Item1 = Ball.Item1]" DisplayName="Check if the paddle and ball are on the same x position" sap:VirtualizedContainerService.HintSize="804,428" sap2010:WorkflowViewState.IdRef="If_4">
          <If.Then>
            <InvokeMethod DisplayName="Don't move paddle (0)" sap:VirtualizedContainerService.HintSize="238,132" sap2010:WorkflowViewState.IdRef="InvokeMethod_2" MethodName="Enqueue">
              <InvokeMethod.TargetObject>
                <InArgument x:TypeArguments="scg:Queue(x:Int64)">[io_InputQueue]</InArgument>
              </InvokeMethod.TargetObject>
              <InArgument x:TypeArguments="x:Int64">0</InArgument>
            </InvokeMethod>
          </If.Then>
          <If.Else>
            <If Condition="[Paddle.Item1 &lt; Ball.Item1]" DisplayName="Check to see if the paddle should move right or left" sap:VirtualizedContainerService.HintSize="521,280" sap2010:WorkflowViewState.IdRef="If_3">
              <If.Then>
                <InvokeMethod DisplayName="Right (1)" sap:VirtualizedContainerService.HintSize="238,132" sap2010:WorkflowViewState.IdRef="InvokeMethod_3" MethodName="Enqueue">
                  <InvokeMethod.TargetObject>
                    <InArgument x:TypeArguments="scg:Queue(x:Int64)">[io_InputQueue]</InArgument>
                  </InvokeMethod.TargetObject>
                  <InArgument x:TypeArguments="x:Int64">1</InArgument>
                </InvokeMethod>
              </If.Then>
              <If.Else>
                <InvokeMethod DisplayName="Left (-1)" sap:VirtualizedContainerService.HintSize="238,132" sap2010:WorkflowViewState.IdRef="InvokeMethod_4" MethodName="Enqueue">
                  <InvokeMethod.TargetObject>
                    <InArgument x:TypeArguments="scg:Queue(x:Int64)">[io_InputQueue]</InArgument>
                  </InvokeMethod.TargetObject>
                  <InArgument x:TypeArguments="x:Int64">-1</InArgument>
                </InvokeMethod>
              </If.Else>
            </If>
          </If.Else>
        </If>
      </Sequence>
    </While>
  </Sequence>
</Activity>